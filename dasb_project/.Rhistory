# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
#Cut categorical values
df_clean = subset(df_factorized, select = -c(Mjob,Fjob,guardian,reason))
#Correlation Matrix Results: shows strong Correlation between all Grades (cut them or average them)
cormat <- cor(round(df_clean,2))
corrplot(df_cor, method = "number")
#Try and find other correlations (Reshape Correlation to show highest correlations first)
melted_cormat <- melt(cormat)
head(melted_cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
student_df.pca <- prcomp(df_factorized,center = TRUE, scale. = TRUE)
summary(student_df.pca)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
summary(cor_df)
student_cor_df<- cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(cor_df$cor_abs, type="l")
cor_df_test <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_tds[1:40,41], varn = names(cor_tds[1:40,41]))
student_cor_df<- cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(cor_df$cor_abs, type="l")
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
head(filter_df)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#let's
list_var_names <- student_cor_df %>% filter(cor_abs>0.2)
filter_df <- data.frame(tds) %>% select(y,one_of(as.character(list_varn$varn)))
head(filter_df)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#let's
list_var_names <- df_factorized_matrix %>% filter(cor_abs>0.2)
filter_df <- data.frame(tds) %>% select(y,one_of(as.character(list_varn$varn)))
head(filter_df)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#let's
list_var_names <- df_factorized_matrix %>% filter(cor_abs>0.2)
filter_df <- data.frame(df_factorized_matrix) %>% select(y,one_of(as.character(list_varn$varn)))
head(filter_df)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#let's
list_var_names <- df_factorized_matrix %>% filter(cor_abs>0.2)
filter_df <- data.frame(df_factorized_matrix) %>% select(y,one_of(as.character(list_var_names$varn)))
head(filter_df)
list_var_names <- df_factorized_matrix %>% filter(cor_abs>0.2)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
head(filter_df)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
list_var_names <- df_factorized_matrix %>% filter(cor_abs>0.2)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
head(filter_df)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#let's
list_var_names <- student_cor_df %>% filter(cor_abs>0.2)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
head(filter_df)
summary(filter_df)
list_var_names <- student_cor_df %>% filter(cor_abs>0.15)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
summary(filter_df)
anova(mini_lm_model1,lm2, lm3, lm4)
summary(lm4)
data_numeric = subset(df_factorized, select = -c(Mjob,Fjob,guardian,reason))
view(data_numeric)
View(data_numeric)
list_var_names <- student_cor_df %>% filter(cor_abs>0.20)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
summary(filter_df)
View(df_factorized_matrix)
str(df_factorized)
df_factorized_matrix <- data.frame(model.matrix( ~ .- 1, data=student_df))
str(df_factorized_matrix)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#Filter out Values with under 15% Correlation
list_var_names <- student_cor_df %>% filter(cor_abs>0.15)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
summary(filter_df)
lm1 <- lm(Gavg ~ failures+higheryes+Medu+studytime+Fedu+schoolGP+schoolMS, data = df_factorized_matrix)
summary(lm1)
lm2 <- lm(Gavg ~ failures+higheryes+schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm2)
lm3 <- lm(Gavg ~ .-famrel-freetime, data = df_factorized_matrix)
summary(lm3)
lm4 <- lm(Gavg ~ age+Medu+studytime+failures, data = df_factorized_matrix)
summary(lm4)
lm5 <- lm(Gavg ~ ., data = df_factorized_matrix)
summary(lm5)
anova(mini_lm_model1,lm2, lm3, lm4)
anova(lm1,lm2, lm3, lm4,lm5)
anova(lm1,lm2, lm3, lm4,lm5)
lm1 <- lm(Gavg ~ .-famrel-freetime, data = df_factorized_matrix)
summary(lm3)
lm2 <- lm(Gavg ~ age+Medu+studytime+failures, data = df_factorized_matrix)
summary(lm4)
lm3 <- lm(Gavg ~ ., data = df_factorized_matrix)
summary(lm5)
lm4 <- lm(Gavg ~ failures+higheryes+Medu+studytime+Fedu+schoolGP+schoolMS, data = df_factorized_matrix)
summary(lm4)
lm5 <- lm(Gavg ~ failures+higheryes+schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm5)
anova(lm1,lm2, lm3, lm4,lm5)
lm1 <- lm(Gavg ~ failures, data = df_factorized_matrix)
summary(lm3)
lm2 <- lm(Gavg ~ failures+higheryes, data = df_factorized_matrix)
summary(lm4)
lm3 <- lm(Gavg ~ failures+higheryes+Medu+studytime, data = df_factorized_matrix)
summary(lm5)
lm4 <- lm(Gavg ~ failures+higheryes+Medu+studytime+Fedu+schoolGP+schoolMS, data = df_factorized_matrix)
summary(lm4)
lm5 <- lm(Gavg ~ failures+higheryes+schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm5)
anova(lm1,lm2, lm3, lm4,lm5)
y <- filter_df %>% select(-Gavg)
pca = prcomp(y, scale. = T, center = T)
plot(pca, type="l")
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#Filter out Values with under 15% Correlation
list_var_names <- student_cor_df %>% filter(cor_abs>0.15)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
summary(filter_df)
y <- filter_df %>% select(-Gavg)
pca = prcomp(y, scale. = T, center = T)
plot(pca, type="l")
summary(pca)
pca_model <- lm(data = pca_df, y ~ .)
summary(pca_model)
pca_model <- lm(data = pca, y ~ .)
summary(pca_model)
y <- filter_df %>% select(-Gavg)
pca = prcomp(y, scale. = T, center = T)
plot(pca, type="l")
summary(pca)
pca_model <- lm(data = pca, y ~ .)
summary(pca_model)
pca_model <- lm(data = pca, Gavg ~ .)
summary(pca_model)
pca_df$Gavg = filter_df$Gavg
pca_model <- lm(data = pca, Gavg ~ .)
summary(pca_model)
pca$Gavg = filter_df$Gavg
pca_model <- lm(data = pca, Gavg ~ .)
summary(pca_model)
pca_df <- data.frame(pca$x)
pca_df$Gavg = filter_df$Gavg
pca_model <- lm(data = pca_df, Gavg ~ .)
summary(pca_model)
lm1 <- lm(Gavg ~ failures, data = df_factorized_matrix)
summary(lm3)
lm2 <- lm(Gavg ~ failures+higheryes, data = df_factorized_matrix)
summary(lm4)
lm3 <- lm(Gavg ~ failures+higheryes+Medu+studytime, data = df_factorized_matrix)
summary(lm5)
lm4 <- lm(Gavg ~ failures+higheryes+Medu+studytime+Fedu+schoolGP+schoolMS, data = df_factorized_matrix)
summary(lm4)
lm5 <- lm(Gavg ~ failures+higheryes+schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm5)
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#Filter out Values with under 15% Correlation
list_var_names <- student_cor_df %>% filter(cor_abs>0.15)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
summary(filter_df)
y <- filter_df %>% select(-Gavg)
pca = prcomp(y, scale. = T, center = T)
plot(pca, type="l")
summary(pca)
pca_df <- data.frame(pca$x)
pca_df <- pca_df %>% select(-PC7,-PC8)
pca_df$Gavg = filter_df$Gavg
pca_model <- lm(data = pca_df, Gavg ~ .)
summary(pca_model)
anova(lm1,lm2, lm3, lm4,lm5, pca_model)
coef(lm5)
coef(lm5)
lm6 <- lm(Gavg ~ .,data df_factorized_matrix)
summary(lm6)
lm6 <- lm(Gavg ~ .,data = df_factorized_matrix)
summary(lm6)
summary(df_factorized_matrix)
predLinear <- predict(lm5, newdata = data.frame(failures=1 ,higheryes =1 , schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=2 ,Dalc=2 ))
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(predLinear)
#make accuracy test
fitted.results <- predict(lm5, newdata=subset(test.data, select=c(failures,higheryes,schoolGP,schoolMS,
Medu,studytime,Fedu,Dalc)))
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(fitted.results)
pred <- round(pred, 0)
misClasificError <- mean(pred != test.data$Gavg)
print(paste("Accuracy", 1-misClasificError))
library(SDMTools)
acc <- accuracy(test.data$Gavg, pred, threshold=0.5)
print(paste("Accuracy with SDM ", acc$AUC))
summary(df_factorized_matrix)
predLinear <- predict(lm5, newdata = data.frame(failures=1 ,higheryes =1 , schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=2 ,Dalc=2 ))
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(predLinear)
#make accuracy test
fitted.results <- predict(lm5, newdata=subset(test.data, select=c(failures,higheryes,schoolGP,schoolMS,
Medu,studytime,Fedu,Dalc)))
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(predLinear)
#make accuracy test
fitted.results <- predict(lm5, newdata=subset(test.data, select=c(failures,higheryes,schoolGP,schoolMS,
Medu,studytime,Fedu,Dalc)))
#Create Training and Test Set
set.seed(99)
train.data <- sample_frac(df_factorized_matrix, 0.7) # select 70% random samples
test.data <- setdiff(df_factorized_matrix,train.data)
#create train and test set with numerical values
train.data_numeric <- sample_frac(df_numeric, 0.7) # select 70% random samples
test.data_numeric <- setdiff(df_numeric,train.data_numeric)
df_numeric = subset(df_factorized, select = -c(Mjob,Fjob,guardian,reason))
View(data_numeric)
set.seed(99)
train.data <- sample_frac(df_factorized_matrix, 0.7) # select 70% random samples
test.data <- setdiff(df_factorized_matrix,train.data)
#create train and test set with numerical values
train.data_numeric <- sample_frac(df_numeric, 0.7) # select 70% random samples
test.data_numeric <- setdiff(df_numeric,train.data_numeric)
library()
library(knitr)
library(pander)
library(plotly)
library(plyr)
library(magrittr)
library(readr)
library(rpart)
library(DMwR)
library(dplyr)
library(corrplot)
library(randomForest)
library(ggplot2)
library(reshape2)
library(corrgram)
#Open and read file
df_raw <- read.csv("student_merged.csv", stringsAsFactors = FALSE)
df<-df_raw %>% distinct(school,sex,age,address,famsize,Pstatus,
Medu,Fedu,Mjob,Fjob,reason,
guardian,traveltime,studytime,failures,
schoolsup, famsup,activities,nursery,higher,internet,
romantic,famrel,freetime,goout,Dalc,Walc,health,absences, .keep_all = TRUE)
View(df)
str(df)
#-----------------------------------------------------------------------------------------------------------------------------------
#DATA Cleansing
#Since our GGplot later shows that all Grades have a big correlation with eachtother, we create an avg Grade = Gavg
df$Gavg<-(df$G1+df$G2+df$G3)/3
student_df = subset(df, select = -c(G1,G2,G3))
str(student_df)
df_factorized <- student_df
df_factorized$class<-as.numeric(factor(df_factorized$class))
df_factorized$famsize<-as.numeric(factor(df_factorized$famsize))
df_factorized$Pstatus<-as.numeric(factor(df_factorized$Pstatus))
df_factorized$address<-as.numeric(factor(df_factorized$address))
df_factorized$sex<-as.numeric(factor(df_factorized$sex))
df_factorized$school<-as.numeric(factor(df_factorized$school))
df_factorized$schoolsup<-as.numeric(factor(df_factorized$schoolsup))
df_factorized$famsup<-as.numeric(factor(df_factorized$famsup))
df_factorized$paid<-as.numeric(factor(df_factorized$paid))
df_factorized$activities<-as.numeric(factor(df_factorized$activities))
df_factorized$nursery<-as.numeric(factor(df_factorized$nursery))
df_factorized$higher<-as.numeric(factor(df_factorized$higher))
df_factorized$internet<-as.numeric(factor(df_factorized$internet))
df_factorized$romantic<-as.numeric(factor(df_factorized$romantic))
df_factorized$guardian<-as.numeric(factor(df_factorized$guardian))
df_factorized$Mjob<-as.numeric(factor(df_factorized$Mjob))
df_factorized$Fjob<-as.numeric(factor(df_factorized$Fjob))
df_factorized$reason<-as.numeric(factor(df_factorized$reason))
#as factor for the categorical Data
df_factorized$Mjob <- as.factor(df$Mjob)
df_factorized$Fjob <- as.factor(df$Fjob)
df_factorized$guardian <- as.factor(df$guardian)
df_factorized$reason <- as.factor(df$reason)
df_factorized_matrix <- data.frame(model.matrix( ~ .- 1, data=student_df))
str(df_factorized_matrix)
#TO DELETE:Cut the categorical values
df_numeric = subset(df_factorized, select = -c(Mjob,Fjob,guardian,reason))
View(data_numeric)
set.seed(99)
train.data <- sample_frac(df_factorized_matrix, 0.7) # select 70% random samples
test.data <- setdiff(df_factorized_matrix,train.data)
train.data_numeric <- sample_frac(df_numeric, 0.7) # select 70% random samples
test.data_numeric <- setdiff(df_numeric,train.data_numeric)
lm5 <- lm(Gavg ~ failures+higheryes+schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm5)
predLinear <- predict(lm5, newdata = data.frame(failures=1 ,higheryes =1 , schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=2 ,Dalc=2 ))
library(corrgram)
library(graphics)
library(gridExtra)
library(shinythemes)
install.packages("pander")
install.packages("DMwR")
install.packages("plotly")
predLinear <- predict(lm5, newdata = data.frame(failures=1 ,higheryes =1 , schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=2 ,Dalc=2 ))
predLinear <- predict(lm5, newdata = data.frame(failures=3 ,higheryes =1, schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=1 ,Dalc=1 ))
summary(df_factorized_matrix)
predLinear <- predict(lm5, newdata = data.frame(failures=3 ,higheryes =0, schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=1 ,Dalc=1 ))
predLinear <- predict(lm5, newdata = data.frame(failures=1 ,higheryes =0, schoolGP=1 ,schoolMS=0 ,Medu=3 ,studytime=1 ,
Fedu=1 ,Dalc=1 ))
cor_df <- cor(df_factorized_matrix, df_factorized_matrix, method = "pearson")
student_cor_df<- data.frame(cor=cor_df[1:40,41], varn = names(cor_df[1:40,41]))
student_cor_df<- student_cor_df%>%mutate(cor_abs = abs(cor)) %>% arrange(desc(cor_abs))
plot(student_cor_df$cor_abs, type="l")
#Filter out Values with under 15% Correlation
list_var_names <- student_cor_df %>% filter(cor_abs>0.15)
filter_df <- data.frame(df_factorized_matrix) %>% select(Gavg,one_of(as.character(list_var_names$varn)))
summary(filter_df)
lm3 <- lm(Gavg ~ schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm3)
lm5 <- lm(Gavg ~ failures+higheryes+schoolGP+schoolMS+Medu+studytime+Fedu+Dalc, data = df_factorized_matrix)
summary(lm5)
lm6 <- lm(Gavg ~ .,data = df_factorized_matrix)
summary(lm6)
anova(lm1,lm2, lm3, lm4,lm5, pca_model)
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(predLinear)
fitted.results <- predict(lm5, newdata=subset(test.data, select=c(failures,higheryes,schoolGP,schoolMS,
Medu,studytime,Fedu,Dalc)))
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(fitted.results)
pred <- round(pred, 0)
misClasificError <- mean(pred != test.data$Gavg)
print(paste("Accuracy", 1-misClasificError))
library(SDMTools)
acc <- accuracy(test.data$Gavg, pred, threshold=0.5)
print(paste("Accuracy with SDM ", acc$AUC))
install.packages("SDMTools")
install.packages("C:\Users\tobia\Downloads\SDMTools_1.1-221.2.tar", repo=NULL, type="source")
install.packages("Users\tobia\Downloads\SDMTools_1.1-221.2.tar", repo=NULL, type="source")
lm4 <- lm(Gavg ~ failures*higheryes+Medu+studytime+Fedu+schoolGP+schoolMS, data = df_factorized_matrix)
summary(lm4)
lm4 <- lm(Gavg ~ failures+higheryes+Medu+studytime+Fedu+schoolGP+schoolMS, data = df_factorized_matrix)
summary(lm4)
install.packages("C:\Users\tobia\Downloads\SDMTools_1.1-221.2.tar", repos=NULL, type="source")
install.packages("C:\\Users\tobia\Downloads\SDMTools_1.1-221.2.tar", repos=NULL, type="source")
install.packages("C:\\Users\tobia\Downloads\SDMTools_1.1-221.2.tar", repos=NULL, type="source")
backtransform <- function(x) (exp(x)/(exp(x)+1))
pred <- backtransform(fitted.results)
pred <- round(pred, 0)
misClasificError <- mean(pred != test.data$Gavg)
print(paste("Accuracy", 1-misClasificError))
#Let's do some predictions
idx <- c(0.125, 2.2, 5, 10, 15, 22.75, 30, 37.5, 39.95)
pred1 <- predict(lm1,data.frame(lstat=idx), interval="prediction")
pred2 <- predict(lm1,data.frame(lstat=idx), interval="confidence")
library(shiny); runApp('shiny_app.R')
install.packages("DT")
runApp('shiny_app.R')
install.packages("shinythemes")
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
