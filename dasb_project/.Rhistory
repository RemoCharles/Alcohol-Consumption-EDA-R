#Open file
DS <- read.table("C:/PRG/DASB/student_merged.csv", quote="\"", comment.char="")
View(DS)
#Open file
DS <- read.csv("C:/PRG/DASB/student_merged.csv")
View(DS)
#Open file
DS <- read.csv("C:/PRG/DASB/student_merged.csv",quote="\"",comment.char="")
View(DS)
install.packages(c("dplyr", "ggplot2"))
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
library()
#Open and read file
df_raw <- read.csv("student_merged.csv", stringsAsFactors = FALSE)
df<-df_raw%>% distinct(school,sex,age,address,famsize,Pstatus,
Medu,Fedu,Mjob,Fjob,reason,
guardian,traveltime,studytime,failures,
schoolsup, famsup,activities,nursery,higher,internet,
romantic,famrel,freetime,goout,Dalc,Walc,health,absences, .keep_all = TRUE)
View(df)
#Filtering Data to only numeric Data
dfnum <- Filter(is.numeric, df)
summary(dfnum)
df.pca <- prcomp(dfnum[,c(1:14)],center = TRUE, scale. = TRUE)
summary(df.pca)
dfnum_cor <- cor(dfnum[1:13], dfnum$G1)
dfnum_withoutgrades <-(dfnum[,c(1:14)])
#factorizing all Data categorical data
df_factorized <- df
df_factorized$class<-as.numeric(factor(df_factorized$class,labels=c(-1,1)))
df_factorized$famsize<-as.numeric(factor(df_factorized$famsize,labels=c(4,3)))
df_factorized$Pstatus<-as.numeric(factor(df_factorized$Pstatus,labels=c(-1,1)))
df_factorized$address<-as.numeric(factor(df_factorized$address,labels=c(-1,1)))
df_factorized$sex<-as.numeric(factor(df_factorized$sex,labels=c(-1,1)))
df_factorized$school<-as.numeric(factor(df_factorized$school,labels=c(2,1)))
df_factorized$schoolsup<-as.numeric(factor(df_factorized$schoolsup, labels=c(0,1)))
df_factorized$famsup<-as.numeric(factor(df_factorized$famsup, labels=c(0,1)))
df_factorized$paid<-as.numeric(factor(df_factorized$paid, labels=c(0,1)))
df_factorized$activities<-as.numeric(factor(df_factorized$activities, labels=c(0,1)))
df_factorized$nursery<-as.numeric(factor(df_factorized$nursery, labels=c(0,1)))
df_factorized$higher<-as.numeric(factor(df_factorized$higher, labels=c(0,1)))
df_factorized$internet<-as.numeric(factor(df_factorized$internet, labels=c(0,1)))
df_factorized$romantic<-as.numeric(factor(df_factorized$romantic, labels=c(0,1)))
df_factorized$guardian<-as.numeric(factor(df_factorized$guardian))
df_factorized$Mjob<-as.numeric(factor(df_factorized$Mjob))
df_factorized$Fjob<-as.numeric(factor(df_factorized$Fjob))
df_factorized$reason<-as.numeric(factor(df_factorized$reason))
df_factorized$Gintv<-as.numeric(factor(df_factorized$Gintv))
df_factorized$class<-as.numeric(factor(df_factorized$class, labels=c(-1,1)))
summary(df_factorized)
#Cut the categorical values
df_clean = subset(df_factorized, select = -c(G2,G3,Mjob,Fjob,guardian,reason))
#Correlation Matrix Results: shows strong Correlation between all Grades (cut them or average them)
cormat <- cor(round(df_clean,2))
corrplot(df_cor, method = "number")
#Try and find other correlations (Reshape Correlation to show highest correlations first)
melted_cormat <- melt(cormat)
head(melted_cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
df.pca <- prcomp(df_clean[,c(1:27)],center = TRUE, scale. = TRUE)
summary(df.pca)
#Data Exploration finding Correlations
ggplot(aes(x=failures,y=Dalc),data=df)+
geom_point()
ggplot(aes(x=Dalc,y=G1, group=Dalc),data=df)+
geom_boxplot()
plot(famrel ~ absences,data=df )
res <- cor(df)
round(res, 2)
#Create Model, What Variables should we use? (Prediction made on numerical df dfnum (14 variables ))
mini_lm_model1 <- lm(G1 ~ studytime+higher+famsize, data = dfnum_withoutgrades)
summary(mini_lm_model1)
lm2 <- lm(G1 ~ .-famrel-freetime, data = dfnum_withoutgrades)
summary(lm2)
lm3 <- lm(G1 ~ age+Medu+studytime+failures, data = dfnum_withoutgrades)
summary(lm3)
lm4 <- lm(G1 ~ ., data = dfnum_withoutgrades)
summary(lm4)
anova(mini_lm_model1,lm2, lm3, lm4)
#
#
#
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
install.packages("shinythemes")
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('C:/Users/CarloHSLU/Desktop/HSLU_6_SEM/DASB/shiny_app.R')
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
# shinyapp template
library(DT)
# shinyapp template
install.packages("DT")
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
install.packages(c("DT", "shinythemes"))
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
#Data Exploration finding Correlations
ggplot(aes(x=failures,y=Dalc),data=df)+
geom_point()
ggplot(aes(x=Dalc,y=G1, group=Dalc),data=df)+
geom_boxplot()
plot(famrel ~ absences,data=df )
res <- cor(df)
round(res, 2)
#Create Model, What Variables should we use? (Prediction made on numerical df dfnum (14 variables ))
mini_lm_model1 <- lm(G1 ~ studytime+higher+famsize, data = dfnum_withoutgrades)
library()
#Open and read file
df_raw <- read.csv("student_merged.csv", stringsAsFactors = FALSE)
df<-df_raw%>% distinct(school,sex,age,address,famsize,Pstatus,
Medu,Fedu,Mjob,Fjob,reason,
guardian,traveltime,studytime,failures,
schoolsup, famsup,activities,nursery,higher,internet,
romantic,famrel,freetime,goout,Dalc,Walc,health,absences, .keep_all = TRUE)
View(df)
#Filtering Data to only numeric Data
dfnum <- Filter(is.numeric, df)
summary(dfnum)
df.pca <- prcomp(dfnum[,c(1:14)],center = TRUE, scale. = TRUE)
summary(df.pca)
dfnum_cor <- cor(dfnum[1:13], dfnum$G1)
dfnum_withoutgrades <-(dfnum[,c(1:14)])
#factorizing all Data categorical data
df_factorized <- df
df_factorized$class<-as.numeric(factor(df_factorized$class,labels=c(-1,1)))
df_factorized$famsize<-as.numeric(factor(df_factorized$famsize,labels=c(4,3)))
df_factorized$Pstatus<-as.numeric(factor(df_factorized$Pstatus,labels=c(-1,1)))
df_factorized$address<-as.numeric(factor(df_factorized$address,labels=c(-1,1)))
df_factorized$sex<-as.numeric(factor(df_factorized$sex,labels=c(-1,1)))
df_factorized$school<-as.numeric(factor(df_factorized$school,labels=c(2,1)))
df_factorized$schoolsup<-as.numeric(factor(df_factorized$schoolsup, labels=c(0,1)))
df_factorized$famsup<-as.numeric(factor(df_factorized$famsup, labels=c(0,1)))
df_factorized$paid<-as.numeric(factor(df_factorized$paid, labels=c(0,1)))
df_factorized$activities<-as.numeric(factor(df_factorized$activities, labels=c(0,1)))
df_factorized$nursery<-as.numeric(factor(df_factorized$nursery, labels=c(0,1)))
df_factorized$higher<-as.numeric(factor(df_factorized$higher, labels=c(0,1)))
df_factorized$internet<-as.numeric(factor(df_factorized$internet, labels=c(0,1)))
df_factorized$romantic<-as.numeric(factor(df_factorized$romantic, labels=c(0,1)))
df_factorized$guardian<-as.numeric(factor(df_factorized$guardian))
df_factorized$Mjob<-as.numeric(factor(df_factorized$Mjob))
df_factorized$Fjob<-as.numeric(factor(df_factorized$Fjob))
df_factorized$reason<-as.numeric(factor(df_factorized$reason))
df_factorized$Gintv<-as.numeric(factor(df_factorized$Gintv))
df_factorized$class<-as.numeric(factor(df_factorized$class, labels=c(-1,1)))
summary(df_factorized)
#Cut the categorical values
df_clean = subset(df_factorized, select = -c(G2,G3,Mjob,Fjob,guardian,reason))
#Correlation Matrix Results: shows strong Correlation between all Grades (cut them or average them)
cormat <- cor(round(df_clean,2))
corrplot(df_cor, method = "number")
#Try and find other correlations (Reshape Correlation to show highest correlations first)
melted_cormat <- melt(cormat)
head(melted_cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
#PCA
df.pca <- prcomp(df_clean[,c(1:27)],center = TRUE, scale. = TRUE)
summary(df.pca)
#PCA shows we don't have many variables that correlate or explain the rest of the variables
#Data Exploration finding Correlations
ggplot(aes(x=failures,y=Dalc),data=df)+
geom_point()
ggplot(aes(x=Dalc,y=G1, group=Dalc),data=df)+
geom_boxplot()
plot(famrel ~ absences,data=df )
res <- cor(df)
round(res, 2)
#Create Model, What Variables should we use? (Prediction made on numerical df dfnum (14 variables ))
mini_lm_model1 <- lm(G1 ~ studytime+higher+famsize, data = dfnum_withoutgrades)
summary(mini_lm_model1)
lm2 <- lm(G1 ~ .-famrel-freetime, data = dfnum_withoutgrades)
summary(lm2)
lm3 <- lm(G1 ~ age+Medu+studytime+failures, data = dfnum_withoutgrades)
summary(lm3)
lm4 <- lm(G1 ~ ., data = dfnum_withoutgrades)
summary(lm4)
anova(mini_lm_model1,lm2, lm3, lm4)
#
runApp('shiny_app.R')
source("main_app.R")
source("main_app.R")
# shinyapp template
library(DT)
library(shiny)
library(shinythemes)
library(ggplot2)
library(dplyr)
df <- read.csv("student_merged.csv", stringsAsFactors = FALSE)
ui <- fluidPage(theme = shinytheme("flatly"),
titlePanel("Student Alcohol Consumption"),
navbarPage("Let's get started",
tabPanel("Project proposal",
uiOutput("pdfview")
),
tabPanel("Information about the Data", "Tbd"
),
tabPanel("Exploratory Data Analysis",
sidebarLayout(
sidebarPanel(
titlePanel("Exploratory Data Analysis"),
sliderInput("ageInput", "Age", min = 15, max = 22,
value = c(18, 20)),
uiOutput("subjectOutput"),
uiOutput("genderOutput")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("coolplot")),
tabPanel("Table", dataTableOutput("results"))
)
)
)
),
tabPanel("Prediciton"
)
),
)
server <- function(input, output) {
#PDF output of the project proposal. Shiny app has to be opened in Browser and NOT in Rstudio!!!!
output$pdfview <- renderUI({
tags$iframe(style="height:1500px; width:100%", src="Project_proposal.pdf")
})
output$genderOutput <- renderUI({
checkboxGroupInput("genderInput", "Gender",
sort(unique(df$sex)),
selected = "F")
})
output$subjectOutput <- renderUI({
checkboxGroupInput("subjectInput", "Subject",
sort(unique(df$school)),
selected = "MS")
})
filtered <- reactive({
if (is.null(input$subjectInput)) {
return(NULL)
}
df %>%
filter(age >= input$ageInput[1],
age <= input$ageInput[2],
school %in% input$subjectInput,
sex %in% input$genderInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(failures)) +
geom_histogram()
})
output$results <- renderDataTable({
filtered()
})
}
shinyApp(ui = ui, server = server)
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
install.packages("ISLR")
ggplot(data=medv.corr) + geom_point(aes(x=col, y=correlation)) + geom_hline(yintercept=0, color="blue", size=2)
#install.packages("ISLR");
library(MASS)
library(ISLR)
library(tidyverse)
# dataset used
help(Boston)
#Let' have a look at the correlations
Boston.corr <- cor(Boston)
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = Boston.corr, col = palette, symm = TRUE)
#we concentrate on the "medv" as output for the regression
correlation <- Boston.corr[,'medv']
col <- colnames(Boston.corr)
medv.corr <- tibble(col, correlation)
ggplot(data=medv.corr) + geom_point(aes(x=col, y=correlation)) + geom_hline(yintercept=0, color="blue", size=2)
df.corr <- cor(df)
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
#Code for Data Preapration (for correlation or Prediciton Model)
Dalc <- as.factor(Dalc)
#Code for Data Preapration (for correlation or Prediciton Model)
Dalc <- as.factor(Dalc)
#Code for Data Preapration (for correlation or Prediciton Model)
df$Dalc <- as.factor(df$Dalc)
runApp('shiny_app.R')
#Code for Data Preapration (for correlation or Prediciton Model)
df$Dalc <- as.factor(df$Dalc)
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
df$failures <- as.factor(df$failures)
df$Walc <- as.factor(df$Walc)
runApp('shiny_app.R')
runApp('shiny_app.R')
